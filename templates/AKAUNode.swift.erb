// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation

/// AudioKit version of Apple's <%= au_name %> Audio Unit
///
open class AK<%= au_name %>: AKNode, AKToggleable {

    fileprivate let effectAU = AVAudioUnitEffect(
    audioComponentDescription:
    AudioComponentDescription(appleEffect: kAudioUnitSubType_<%= au_name %>))

<% parameters.each do |parameter| -%>
    /// <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>)
    @Parameter public var <%= parameter[:variable] %>: AUValue

<% end -%>
    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the <%= au_name.underscore.humanize.uncapitalize %> node
    ///
    /// - parameter input: Input node to process
<% parameters.each do |parameter| -%>
    /// - parameter <%= parameter[:variable] %>: <%= parameter[:variable].underscore.humanize.titlecase %> (<%= parameter[:type] %>) ranges from <%= parameter[:min] %> to <%= parameter[:max] %> (Default: <%= parameter[:default] %>)
<% end -%>
    ///
    public init(
        _ input: AKNode,
<% parameters.each_with_index do |parameter, i| -%>
        <%= parameter[:variable] %>: AUValue = <%= parameter[:default] %><%= ",\n" if i < parameters.count - 1 -%>
<% end %>) {
        super.init(avAudioNode: effectAU)
        connections.append(input)

<% parameters.each_with_index do |parameter, i| -%>
        self.$<%= parameter[:variable] %>.associate(with: effectAU, index: <%= i %>)
<% end -%>

<% parameters.each do |parameter| -%>
        self.<%= parameter[:variable] %> = <%= parameter[:variable] %>
<% end -%>
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        effectAU.bypass = false
        isStarted = true
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        effectAU.bypass = true
        isStarted = false
    }
}
