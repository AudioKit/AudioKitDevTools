import AudioKit
import AVFoundation
import SwiftUI

struct <%= node[2..-1] %>Data {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    var <%= data["ak-variable"] %>: AUValue = <%= data["default"] %>
<% end -%>
<% end -%>
    var rampDuration: AUValue = 0.02
    var balance: AUValue = 0.5
}

class <%= node[2..-1] %>Conductor: ObservableObject, ProcessesPlayerInput {

    let engine = AKEngine()
    let player = AKPlayer()
    let <%= one_word_desc.downcase %>: <%= node %>
    let dryWetMixer: AKDryWetMixer
    let playerPlot: AKNodeOutputPlot
    let <%= one_word_desc.downcase %>Plot: AKNodeOutputPlot
    let mixPlot: AKNodeOutputPlot
    let buffer: AVAudioPCMBuffer

    init() {
        let url = Bundle.main.resourceURL?.appendingPathComponent("Samples/beat.aiff")
        let file = try! AVAudioFile(forReading: url!)
        buffer = try! AVAudioPCMBuffer(file: file)!

        <%= one_word_desc.downcase %> = <%= node %>(player)
        dryWetMixer = AKDryWetMixer(player, <%= one_word_desc.downcase %>)
        playerPlot = AKNodeOutputPlot(player)
        <%= one_word_desc.downcase %>Plot = AKNodeOutputPlot(<%= one_word_desc.downcase %>)
        mixPlot = AKNodeOutputPlot(dryWetMixer)
        engine.output = dryWetMixer

        playerPlot.plotType = .rolling
        playerPlot.shouldFill = true
        playerPlot.shouldMirror = true
        playerPlot.setRollingHistoryLength(128)
        <%= one_word_desc.downcase %>Plot.plotType = .rolling
        <%= one_word_desc.downcase %>Plot.color = .blue
        <%= one_word_desc.downcase %>Plot.shouldFill = true
        <%= one_word_desc.downcase %>Plot.shouldMirror = true
        <%= one_word_desc.downcase %>Plot.setRollingHistoryLength(128)
        mixPlot.color = .purple
        mixPlot.shouldFill = true
        mixPlot.shouldMirror = true
        mixPlot.plotType = .rolling
        mixPlot.setRollingHistoryLength(128)
    }

    @Published var data = <%= node[2..-1] %>Data() {
        didSet {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            <%= one_word_desc.downcase %>.$<%= data["ak-variable"] %>.ramp(to: data.<%= data["ak-variable"] %>, duration: data.rampDuration)
<% end -%>
<% end -%>
            dryWetMixer.balance = data.balance
        }
    }

    func start() {
        playerPlot.start()
        <%= one_word_desc.downcase %>Plot.start()
        mixPlot.start()

        do {
            try engine.start()
            // player stuff has to be done after start
            player.scheduleBuffer(buffer, at: nil, options: .loops)
        } catch let err {
            AKLog(err)
        }
    }

    func stop() {
        engine.stop()
    }
}

struct <%= node[2..-1] %>View: View {
    @ObservedObject var conductor = <%= node[2..-1] %>Conductor()

    var body: some View {
        ScrollView {
            PlayerControls(conductor: conductor)
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            ParameterSlider(text: "<%= data["ak-variable"].underscore.humanize.titlecase %>",
                            parameter: self.$conductor.data.<%= data["ak-variable"] %>,
                            range: <%= data["minimum"] %>...<%= data["maximum"] %>,
                            units: "<%= data["au-unit"] %>")
<% end -%>
<% end -%>
            ParameterSlider(text: "Balance",
                            parameter: self.$conductor.data.balance,
                            range: 0...1,
                            units: "%")
            DryWetMixPlotsView(dry: conductor.playerPlot, wet: conductor.<%= one_word_desc.downcase %>Plot, mix: conductor.mixPlot)
        }
        .padding()
        .navigationBarTitle(Text("<%= node[2..-1].underscore.humanize.titlecase %>"))
        .onAppear {
            self.conductor.start()
        }
        .onDisappear {
            self.conductor.stop()
        }
    }
}

struct <%= node[2..-1] %>_Previews: PreviewProvider {
    static var previews: some View {
        <%= node[2..-1] %>View()
    }
}
