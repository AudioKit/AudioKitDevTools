//
//  <%= node %>DSPKernel.hpp
//  AudioKit
//
//  Created by Aurelius Prochazka, revision history on Github.
//  Copyright Â© 20<%= Time.now.strftime('%y') %> Aurelius Prochazka. All rights reserved.
//

#pragma once

#import "DSPKernel.hpp"
#import "ParameterRamper.hpp"

#import <AudioKit/AudioKit-Swift.h>

extern "C" {
#include "soundpipe.h"
}

<% if parameters.count > 0 -%>
enum {
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= data["ak-variable"] %>Address = <%= i %><%= "," if i < parameters.count - 1 %>
<% end -%>
<% end -%>
};
<% end -%>

class <%= node %>DSPKernel : public AKSoundpipeKernel, public AKBuffered {
public:
    // MARK: Member Functions

    <%= node %>DSPKernel() {}

    void init(int _channels, double _sampleRate) override {
        AKSoundpipeKernel::init(_channels, _sampleRate);

        sp_<%= sp_module %>_create(&<%= sp_module %>0);
        sp_<%= sp_module %>_create(&<%= sp_module %>1);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>0);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>1);
<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= sp_module %>0-><%= sp_var %> = <%= data["default"] %>;
        <%= sp_module %>1-><%= sp_var %> = <%= data["default"] %>;
<% end -%>
<% end -%>

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>Ramper.init();
<% end -%>
<% end -%>
    }
<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
    void setup<%= upper(data["ak-variable"]) %>(uint32_t size) {
        <%= sp_var %>_size = size;
        sp_ftbl_create(sp, &<%= sp_var %>, <%= sp_var %>_size);
    }

    void set<%= upper(data["ak-variable"]) %>Value(uint32_t index, float value) {
        <%= sp_var %>->tbl[index] = value;
    }
<% end -%>
<% end -%>

    void start() {
        started = true;
    }

    void stop() {
        started = false;
    }

    void destroy() {
        sp_<%= sp_module %>_destroy(&<%= sp_module %>0);
        sp_<%= sp_module %>_destroy(&<%= sp_module %>1);
        AKSoundpipeKernel::destroy();
    }

    void reset() {
        resetted = true;
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>Ramper.reset();
<% end -%>
<% end -%>
    }

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    void set<%= upper(data["ak-variable"]) %>(float value) {
        <%= data["ak-variable"] %> = clamp(value, <%= data["minimum"] %>f, <%= data["maximum"] %>f);
        <%= data["ak-variable"] %>Ramper.setImmediate(<%= data["ak-variable"] %>);
    }

<% end -%>
<% end -%>

    void setParameter(AUParameterAddress address, AUValue value) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.setUIValue(clamp(value, <%= data["minimum"] %>f, <%= data["maximum"] %>f));
                break;

<% end -%>
<% end -%>
        }
    }

    AUValue getParameter(AUParameterAddress address) {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                return <%= data["ak-variable"] %>Ramper.getUIValue();

<% end -%>
<% end -%>
            default: return 0.0f;
        }
    }

    void startRamp(AUParameterAddress address, AUValue value, AUAudioFrameCount duration) override {
        switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            case <%= data["ak-variable"] %>Address:
                <%= data["ak-variable"] %>Ramper.startRamp(clamp(value, <%= data["minimum"] %>f, <%= data["maximum"] %>f), duration);
                break;

<% end -%>
<% end -%>
        }
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override {

        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {

            int frameOffset = int(frameIndex + bufferOffset);

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            <%= data["ak-variable"] %> = <%= data["ak-variable"] %>Ramper.getAndStep();
            <%= sp_module %>0-><%= sp_var %> = (float)<%= data["ak-variable"] %>;
            <%= sp_module %>1-><%= sp_var %> = (float)<%= data["ak-variable"] %>;
<% end -%>
<% end -%>

<% if type == "generator" -%>
            float temp = 0;
            for (int channel = 0; channel < channels; ++channel) {
                float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;
                if (started) {
                    if (channel == 0) {
                        sp_<%= sp_module %>_compute(sp, <%= sp_module %>, nil, &temp);
                    }
                    *out = temp;
                } else {
                    *out = 0.0;
                }
            }
<% else -%>
            for (int channel = 0; channel < channels; ++channel) {
                float *in  = (float *)inBufferListPtr->mBuffers[channel].mData  + frameOffset;
                float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;

                if (started) {
                    if (channel == 0) {
                        sp_<%= sp_module %>_compute(sp, <%= sp_module %>0, in, out);
                    } else {
                        sp_<%= sp_module %>_compute(sp, <%= sp_module %>1, in, out);
                    }
                } else {
                    *out = *in;
                }
            }
<% end -%>
        }
    }

    // MARK: Member Variables

private:

    sp_<%= sp_module %> *<%= sp_module %>0;
    sp_<%= sp_module %> *<%= sp_module %>1;
<% tables.each do |table| -%>
<% table.each do |sp_var, data| -%>
    sp_ftbl *<%= sp_var %>;
    UInt32 <%= sp_var %>_size = 4096;
<% end -%>
<% end -%>

<% if parameters.count > 0 -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    float <%= data["ak-variable"] %> = <%= data["default"] %>;
<% end -%>
<% end -%>
<% end -%>

public:
<% if type == "generator" -%>
    bool started = false;
<% else -%>
    bool started = true;
<% end -%>
    bool resetted = false;
<% if parameters.count > 0 -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ParameterRamper <%= data["ak-variable"] %>Ramper = <%= data["default"] %>;
<% end -%>
<% end -%>
<% end -%>
};
