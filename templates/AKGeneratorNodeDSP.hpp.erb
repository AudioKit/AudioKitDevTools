//
//  <%= node %>DSP.hpp
//  AudioKit
//
//  Created by Aurelius Prochazka, revision history on Github.
//  Copyright Â© 20<%= Time.now.strftime('%y') %> AudioKit. All rights reserved.
//

#pragma once

#import <AVFoundation/AVFoundation.h>

typedef NS_ENUM(AUParameterAddress, <%= node %>Parameter) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= node %>Parameter<%= data["ak-variable"].upcase_first %>,
<% end -%>
<% end -%>    <%= node %>ParameterRampTime
};

#ifndef __cplusplus

void* create<%= node[2..-1] %>DSP(int nChannels, double sampleRate);

#else

#import "AKSoundpipeDSPBase.hpp"

class <%= node %>DSP : public AKSoundpipeDSPBase {
private:
    struct _Internal;
    std::unique_ptr<_Internal> _private;
 
public:
    <%= node %>DSP();
    ~<%= node %>DSP();

<% (parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    float <%= data["ak-variable"] %>LowerBound = <%= data["minimum"] %>;
    float <%= data["ak-variable"] %>UpperBound = <%= data["maximum"] %>;
<% end -%>
<% end -%>

<% (parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    float default<%= data["ak-variable"].camelcase %> = <%= data["default"] %>;
<% end -%>
<% end -%>

    int defaultRampTimeSamples = 10000;

    // Uses the ParameterAddress as a key
    void setParameter(AUParameterAddress address, float value, bool immediate) override;

    // Uses the ParameterAddress as a key
    float getParameter(AUParameterAddress address) override;
    
    void init(int _channels, double _sampleRate) override;

    void destroy();

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) override;

    // Generator Stuff
    void setupWaveform(uint32_t size) override;
    void setWaveformValue(uint32_t index, float value) override;
};

#endif
