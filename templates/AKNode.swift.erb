// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation
import CAudioKit

/// <%= description %>
public class <%= node %>: NodeBase {

<% if inputs.count > 0 -%>
    let input: Node
    override public var connections: [Node] { [input] }
<% end -%>

    // MARK: - Parameters

<%= parameters_partial -%>
    // MARK: - Initialization

    /// Initialize this <%= one_word_desc %> node
    ///
    /// - Parameters:
<% if inputs.count > 0 -%>
    ///   - input: Input node to process
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ///   - <%= data["ak-variable"] %>: <%= data["comment"] %>
<% end -%>
<% end -%>
<% if tables.count > 0 -%>
    ///   - waveform: Shape of the tremolo curve
<% end -%>
    ///
    public init(
<% if inputs.count > 0 -%>
        _ input: Node<% if (parameters + constants).count > 0 -%>,
<% end -%>
<% end -%>
<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: AUValue = <%= data["ak-variable"] %>Def.defaultValue<%= ",\n" if i < (parameters + constants + tables).count - 1 %><% end %><% end %><% if tables.count > 0 -%>        waveform: Table = Table(.positiveSine)<% end %>
        ) {
<% if inputs.count > 0 -%>
        self.input = input
<% end -%>
        super.init(avAudioNode: AVAudioNode())

        avAudioNode = instantiate(effect: "<%= four_letter_code %>")
<% if !post_setup.nil? -%>

        <%= post_setup %>
<% end -%>

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>
   }
<% if inputs.count == 0 -%>
    /// Function create an identical new node for use in creating polyphonic instruments
    public func copy() -> <%= node %> {
        let copy = <%= node %>(<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%><%= data["ak-variable"] %>: self.<%= data["ak-variable"] %><%= ", " if i < (parameters + constants).count - 1 %><% end %><% end %>)
        return copy
    }
<% end -%>
}
