<%= header_partial %>

/// <%= description %>
///
open class <%= node %>: AKNode, AKToggleable, AKComponent, AKInput {
    public typealias AKAudioUnitType = <%= node %>AudioUnit
    /// Four letter unique description of the node
    public static let ComponentDescription = AudioComponentDescription(effect: "<%= four_letter_code %>")

    // MARK: - Properties
    public private(set) var internalAU: AKAudioUnitType?

<% (parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /// Lower and upper bounds for <%= data["ak-variable"].titlecase %>
    public static let <%= data["ak-variable"] %>Range: ClosedRange<Double> = <%= data["minimum"] %> ... <%= data["maximum"] %>
<% end %>
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    /// Initial value for <%= data["ak-variable"].titlecase %>
    public static let default<%= data["ak-variable"].camelcase %>: Double = <%= data["default"] %>
<% end %>
<% end -%>
<%= parameters_partial -%>
    /// Tells whether the node is processing (ie. started, playing, or active)
    open var isStarted: Bool {
        return internalAU?.isStarted ?? false
    }

    // MARK: - Initialization

    /// Initialize this <%= one_word_desc %> node
    ///
    /// - Parameters:
<% if inputs.count > 0 -%>
    ///   - input: Input node to process
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ///   - <%= data["ak-variable"] %>: <%= data["comment"] %>
<% end -%>
<% end -%>
    ///
    public init(
<% if inputs.count > 0 -%>
        _ input: AKNode? = nil<% if (parameters + constants).count > 0 -%>,
<% end -%>
<% end -%>
<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: Double = default<%= data["ak-variable"].camelcase %><%= ",\n" if i < (parameters + constants).count - 1 %><% end %><% end %>
        ) {
        super.init()

        _Self.register()
        AVAudioUnit._instantiate(with: _Self.ComponentDescription) { avAudioUnit in
            self.avAudioUnit = avAudioUnit
            self.avAudioNode = avAudioUnit
            self.internalAU = avAudioUnit.auAudioUnit as? AKAudioUnitType
<% if inputs.count > 0 -%>
            input?.connect(to: self)
<% end -%>

<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>
        }
    }

<% if inputs.count == 0 -%>
    /// Function create an identical new node for use in creating polyphonic instruments
    public func copy() -> <%= node %> {
        let copy = <%= node %>(<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%><%= data["ak-variable"] %>: self.<%= data["ak-variable"] %><%= ", " if i < (parameters + constants).count - 1 %><% end %><% end %>)
        return copy
    }
<% end -%>
    // MARK: - Control

    /// Function to start, play, or activate the node, all do the same thing
    open func start() {
        internalAU?.start()
    }

    /// Function to stop or bypass the node, both are equivalent
    open func stop() {
        internalAU?.stop()
    }
}
