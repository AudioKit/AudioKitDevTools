// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation
import CAudioKit

/// <%= description %>
public class <%= node %>: AKNode, AKComponent, AKToggleable {

    public static let ComponentDescription = AudioComponentDescription(effect: "<%= four_letter_code %>")

    public typealias AKAudioUnitType = InternalAU

    public private(set) var internalAU: AKAudioUnitType?

    // MARK: - Parameters

<%= parameters_partial -%>
<%= internal_au_partial %>

    // MARK: - Initialization

    /// Initialize this <%= one_word_desc %> node
    ///
    /// - Parameters:
<% if inputs.count > 0 -%>
    ///   - input: Input node to process
<% end -%>
<% (parameters + constants).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ///   - <%= data["ak-variable"] %>: <%= data["comment"] %>
<% end -%>
<% end -%>
    ///
    public init(
<% if inputs.count > 0 -%>
        _ input: AKNode<% if (parameters + constants).count > 0 -%>,
<% end -%>
<% end -%>
<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        <%= data["ak-variable"] %>: AUValue = <%= data["default"] %><%= ",\n" if i < (parameters + constants).count - 1 %><% end %><% end %>
        ) {
        super.init(avAudioNode: AVAudioNode())

        instantiateAudioUnit { avAudioUnit in
            self.avAudioUnit = avAudioUnit
            self.avAudioNode = avAudioUnit

            guard let audioUnit = avAudioUnit.auAudioUnit as? AKAudioUnitType else {
                fatalError("Couldn't create audio unit")
            }
            self.internalAU = audioUnit

<% (tables+parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            self.<%= data["ak-variable"] %> = <%= data["ak-variable"] %>
<% end -%>
<% end -%>
        }
<% if inputs.count > 0 -%>
        connections.append(input)
<% end -%>
    }
<% if inputs.count == 0 -%>
    /// Function create an identical new node for use in creating polyphonic instruments
    public func copy() -> <%= node %> {
        let copy = <%= node %>(<% (parameters + constants).each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%><%= data["ak-variable"] %>: self.<%= data["ak-variable"] %><%= ", " if i < (parameters + constants).count - 1 %><% end %><% end %>)
        return copy
    }
<% end -%>
}
