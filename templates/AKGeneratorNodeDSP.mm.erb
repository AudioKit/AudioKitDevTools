// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/

#include "<%= node %>DSP.hpp"
<% if parameters.count > 0 -%>
#include "AKLinearParameterRamp.hpp"
<% end -%>
<% if tables.count > 0 -%>
#include <vector>
<% end -%>

extern "C" AKDSPRef create<%= node[2..-1] %>DSP() {
    return new <%= node %>DSP();
}

struct <%= node %>DSP::InternalData {
<% if inputCount == 2 -%>
    sp_<%= sp_module %> *<%= sp_module %>;
<% else -%>
    sp_<%= sp_module %> *<%= sp_module %>0;
    sp_<%= sp_module %> *<%= sp_module %>1;
<% end -%>
<% if tables.count > 0 -%>
    sp_ftbl *ftbl;
    std::vector<float> waveform;
<% end -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    AKLinearParameterRamp <%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>
};

<%= node %>DSP::<%= node %>DSP() : data(new InternalData) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    parameters[<%= node %>Parameter<%= data["ak-variable"].upcase_first %>] = &data-><%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>
}
<% if tables.count > 0 -%>

void <%= node %>DSP::setWavetable(const float* table, size_t length, int index) {
    data->waveform = std::vector<float>(table, table + length);
    reset();
}
<% end -%>

void <%= node %>DSP::init(int channelCount, double sampleRate) {
    AKSoundpipeDSPBase::init(channelCount, sampleRate);
<% if tables.count > 0 -%>
    sp_ftbl_create(sp, &data->ftbl, data->waveform.size());
    std::copy(data->waveform.cbegin(), data->waveform.cend(), data->ftbl->tbl);
<% end -%>
<% if inputCount == 2 -%>
    sp_<%= sp_module %>_create(&data-><%= sp_module %>);
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>);
<% else -%>
    sp_<%= sp_module %>_create(&data-><%= sp_module %>0);
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>0);
    sp_<%= sp_module %>_create(&data-><%= sp_module %>1);
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>1);
<% end -%>
}

void <%= node %>DSP::deinit() {
    AKSoundpipeDSPBase::deinit();
<% if inputCount == 2 -%>
    sp_<%= sp_module %>_destroy(&data-><%= sp_module %>);
<% else -%>
    sp_<%= sp_module %>_destroy(&data-><%= sp_module %>0);
    sp_<%= sp_module %>_destroy(&data-><%= sp_module %>1);
<% end -%>
<% if tables.count > 0 -%>
    sp_ftbl_destroy(&data->ftbl);
<% end -%>
}

void <%= node %>DSP::reset() {
    AKSoundpipeDSPBase::reset();
    if (!isInitialized) return;
<% if inputCount == 2 -%>
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>);
<% else -%>
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>0);
    sp_<%= sp_module %>_init(sp, data-><%= sp_module %>1);
<% end -%>
}

void <%= node %>DSP::process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) {
    for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
        int frameOffset = int(frameIndex + bufferOffset);

        // do ramping every 8 samples
        if ((frameOffset & 0x7) == 0) {
<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            data-><%= data["ak-variable"] %>Ramp.advanceTo(now + frameOffset);
<% end -%>
<% end -%>
        }

<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if inputCount == 2 -%>
        data-><%= sp_module %>-><%= sp_var %> = data-><%= data["ak-variable"] %>Ramp.getValue();
<% else -%>
        data-><%= sp_module %>0-><%= sp_var %> = data-><%= data["ak-variable"] %>Ramp.getValue();
        data-><%= sp_module %>1-><%= sp_var %> = data-><%= data["ak-variable"] %>Ramp.getValue();
<% end -%>
<% end -%>
<% end -%>

        float temp = 0;
        for (int channel = 0; channel < channelCount; ++channel) {
            float *out = (float *)outBufferListPtr->mBuffers[channel].mData + frameOffset;

            if (isStarted) {
                if (channel == 0) {
                    sp_<%= sp_module %>_compute(sp, data-><%= sp_module %>, nil, &temp);
                }
                *out = temp;
            } else {
                *out = 0.0;
            }
        }
    }
}
