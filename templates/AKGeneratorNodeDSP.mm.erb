//
//  <%= node %>DSP.mm
//  AudioKit
//
//  Created by Aurelius Prochazka, revision history on Github.
//  Copyright Â© 20<%= Time.now.strftime('%y') %> AudioKit. All rights reserved.
//

#include "<%= node %>DSP.hpp"
#import "AKLinearParameterRamp.hpp"

extern "C" void* create<%= node[2..-1] %>DSP(int nChannels, double sampleRate) {
    <%= node %>DSP* dsp = new <%= node %>DSP();
    dsp->init(nChannels, sampleRate);
    return dsp;
}

struct <%= node %>DSP::_Internal {
<% if inputCount == 2 -%>
    sp_<%= sp_module %> *_<%= sp_module %>;
<% else -%>
    sp_<%= sp_module %> *_<%= sp_module %>0;
    sp_<%= sp_module %> *_<%= sp_module %>1;
<% end -%>
<% if tables.count > 0 -%>
    sp_ftbl *_ftbl;
    UInt32 _ftbl_size = 4096;
<% end -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    AKLinearParameterRamp <%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>
};

<%= node %>DSP::<%= node %>DSP() : _private(new _Internal) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    _private-><%= data["ak-variable"] %>Ramp.setTarget(default<%= data["ak-variable"].camelcase %>, true);
    _private-><%= data["ak-variable"] %>Ramp.setDurationInSamples(defaultRampTimeSamples);
<% end -%>
<% end -%>
}

// Uses the ParameterAddress as a key
void <%= node %>DSP::setParameter(AUParameterAddress address, AUValue value, bool immediate) {
    switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        case <%= node %>Parameter<%= data["ak-variable"].upcase_first %>:
            _private-><%= data["ak-variable"] %>Ramp.setTarget(clamp(value, <%= data["ak-variable"] %>LowerBound, <%= data["ak-variable"] %>UpperBound), immediate);
            break;
<% end -%>
<% end -%>
        case <%= node %>ParameterRampTime:
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            _private-><%= data["ak-variable"] %>Ramp.setRampTime(value, _sampleRate);
<% end -%>
<% end -%>
            break;
    }
}

// Uses the ParameterAddress as a key
float <%= node %>DSP::getParameter(uint64_t address) {
    switch (address) {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        case <%= node %>Parameter<%= data["ak-variable"].upcase_first %>:
            return _private-><%= data["ak-variable"] %>Ramp.getTarget();
<% end -%>
<% end -%>
        case <%= node %>ParameterRampTime:
<% parameters.each_with_index do |sp_parameter, i| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if i ==  0 -%>
            return _private-><%= data["ak-variable"] %>Ramp.getRampTime(_sampleRate);
<% end -%>
<% end -%>
<% end -%>
    }
    return 0;
}

void <%= node %>DSP::init(int _channels, double _sampleRate) {
    AKSoundpipeDSPBase::init(_channels, _sampleRate);
<% if inputCount == 2 -%>
    sp_<%= sp_module %>_create(&_private->_<%= sp_module %>);
    sp_<%= sp_module %>_init(_sp, _private->_<%= sp_module %>);
<% else -%>
    sp_<%= sp_module %>_create(&_private->_<%= sp_module %>0);
    sp_<%= sp_module %>_init(_sp, _private->_<%= sp_module %>0);
    sp_<%= sp_module %>_create(&_private->_<%= sp_module %>1);
    sp_<%= sp_module %>_init(_sp, _private->_<%= sp_module %>1);
<% end -%>
<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if inputCount == 2 -%>
    _private->_<%= sp_module %>-><%= sp_var %> = default<%= data["ak-variable"].camelcase %>;
<% else -%>
    _private->_<%= sp_module %>0-><%= sp_var %> = default<%= data["ak-variable"].camelcase %>;
    _private->_<%= sp_module %>1-><%= sp_var %> = default<%= data["ak-variable"].camelcase %>;
<% end -%>
<% end -%>
<% end -%>
}

void <%= node %>DSP::destroy() {
<% if inputCount == 2 -%>
    sp_<%= sp_module %>_destroy(&_private->_<%= sp_module %>);
<% else -%>
    sp_<%= sp_module %>_destroy(&_private->_<%= sp_module %>0);
    sp_<%= sp_module %>_destroy(&_private->_<%= sp_module %>1);
<% end -%>
    AKSoundpipeDSPBase::destroy();
}

<% if tables.count > 0 -%>
void <%= node %>DSP::setupWaveform(uint32_t size) {
    _private->_ftbl_size = size;
    sp_ftbl_create(_sp, &_private->_ftbl, _private->_ftbl_size);
}

void <%= node %>DSP::setWaveformValue(uint32_t index, float value) {
    _private->_ftbl->tbl[index] = value;
}
<% end -%>
void <%= node %>DSP::process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) {

    for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
        int frameOffset = int(frameIndex + bufferOffset);

        // do ramping every 8 samples
        if ((frameOffset & 0x7) == 0) {
<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
            _private-><%= data["ak-variable"] %>Ramp.advanceTo(_now + frameOffset);
<% end -%>
<% end -%>
        }

<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if inputCount == 2 -%>
        _private->_<%= sp_module %>-><%= sp_var %> = _private-><%= data["ak-variable"] %>Ramp.getValue();
<% else -%>
        _private->_<%= sp_module %>0-><%= sp_var %> = _private-><%= data["ak-variable"] %>Ramp.getValue();
        _private->_<%= sp_module %>1-><%= sp_var %> = _private-><%= data["ak-variable"] %>Ramp.getValue();
<% end -%>
<% end -%>
<% end -%>

        float temp = 0;
        for (int channel = 0; channel < _nChannels; ++channel) {
            float* out = (float *)_outBufferListPtr->mBuffers[channel].mData + frameOffset;

            if (_playing) {
                if (channel == 0) {
                    sp_<%= sp_module %>_compute(_sp, _private->_<%= sp_module %>, nil, &temp);
                }
                *out = temp;
            } else {
                *out = 0.0;
            }
        }
    }
}
