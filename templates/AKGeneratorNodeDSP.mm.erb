// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/

#include "AudioKit.h"
#include "soundpipe.h"
<% if tables.count > 0 -%>
#include <vector>
<% end -%>

#include "DebugDSP.h"

enum <%= node %>Parameter : AUParameterAddress {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= node %>Parameter<%= data["ak-variable"].camelcase %>,
<% end -%>
<% end -%>
};

class <%= node %>DSP : public AKSoundpipeDSPBase {
private:
<% if inputCount == 2 -%>
    sp_<%= sp_module %> *<%= sp_module %>;
<% else -%>
    sp_<%= sp_module %> *<%= sp_module %>0;
    sp_<%= sp_module %> *<%= sp_module %>1;
<% end -%>
<% if tables.count > 0 -%>
    sp_ftbl *ftbl;
    std::vector<float> waveform;
<% end -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ParameterRamper <%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>

public:
    <%= node %>DSP() {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        parameters[<%= node %>Parameter<%= data["ak-variable"].upcase_first %>] = &<%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>
    }
<% if tables.count > 0 -%>

    void setWavetable(const float* table, size_t length, int index) {
        waveform = std::vector<float>(table, table + length);
        reset();
    }
<% end -%>

    void init(int channelCount, double sampleRate) {
        AKSoundpipeDSPBase::init(channelCount, sampleRate);
<% if tables.count > 0 -%>
        sp_ftbl_create(sp, &ftbl, waveform.size());
        std::copy(waveform.cbegin(), waveform.cend(), ftbl->tbl);
<% end -%>
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_create(&<%= sp_module %>);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_create(&<%= sp_module %>0);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>0);
        sp_<%= sp_module %>_create(&<%= sp_module %>1);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>1);
<% end -%>
    }

    void deinit() {
        AKSoundpipeDSPBase::deinit();
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_destroy(&<%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_destroy(&<%= sp_module %>0);
        sp_<%= sp_module %>_destroy(&<%= sp_module %>1);
<% end -%>
<% if tables.count > 0 -%>
        sp_ftbl_destroy(&ftbl);
<% end -%>
    }

    void reset() {
        AKSoundpipeDSPBase::reset();
        if (!isInitialized) return;
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_init(sp, <%= sp_module %>0);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>1);
<% end -%>
    }

    void process(AUAudioFrameCount frameCount, AUAudioFrameCount bufferOffset) {
        for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
            int frameOffset = int(frameIndex + bufferOffset);

<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if inputCount == 2 -%>
            <%= sp_module %>-><%= sp_var %> = <%= data["ak-variable"] %>Ramp.getAndStep();
<% else -%>
            float <%= data["ak-variable"] %> = <%= data["ak-variable"] %>Ramp.getAndStep();
            <%= sp_module %>0-><%= sp_var %> = <%= data["ak-variable"] %>;
            <%= sp_module %>1-><%= sp_var %> = <%= data["ak-variable"] %>;
<% end -%>
<% end -%>
<% end -%>
            float temp = 0;
            for (int channel = 0; channel < channelCount; ++channel) {
                float *out = (float *)outputBufferLists[0]->mBuffers[channel].mData + frameOffset;

                if (isStarted) {
                    if (channel == 0) {
                        sp_<%= sp_module %>_compute(sp, <%= sp_module %>, nil, &temp);
                    }
                    *out = temp;
                } else {
                    *out = 0.0;
                }
            }
        }
    }
};

AK_REGISTER_DSP(<%= node %>DSP)
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
AK_REGISTER_PARAMETER(<%= node %>Parameter<%= data["ak-variable"].camelcase %>)
<% end -%>
<% end -%>
