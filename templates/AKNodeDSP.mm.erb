// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/

#include "SoundpipeDSPBase.h"
#include "ParameterRamper.h"
#include "soundpipe.h"
<% if tables.count > 0 -%>
#include <vector>
<% end -%>

enum <%= node %>Parameter : AUParameterAddress {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    <%= node %>Parameter<%= data["ak-variable"].camelcase %>,
<% end -%>
<% end -%>
};

class <%= node %>DSP : public SoundpipeDSPBase {
private:
<% if inputCount == 2 -%>
    sp_<%= sp_module %> *<%= sp_module %>;
<% else -%>
    sp_<%= sp_module %> *<%= sp_module %>0;
    sp_<%= sp_module %> *<%= sp_module %>1;
<% end -%>
<% if tables.count > 0 -%>
    sp_ftbl *ftbl;
    std::vector<float> waveform;
<% end -%>
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
    ParameterRamper <%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>

public:
    <%= node %>DSP() {
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
        parameters[<%= node %>Parameter<%= data["ak-variable"].upcase_first %>] = &<%= data["ak-variable"] %>Ramp;
<% end -%>
<% end -%>
    }

    void init(int channelCount, double sampleRate) override {
        SoundpipeDSPBase::init(channelCount, sampleRate);
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_create(&<%= sp_module %>);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_create(&<%= sp_module %>0);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>0);
        sp_<%= sp_module %>_create(&<%= sp_module %>1);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>1);
<% end -%>
    }

    void deinit() override {
        SoundpipeDSPBase::deinit();
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_destroy(&<%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_destroy(&<%= sp_module %>0);
        sp_<%= sp_module %>_destroy(&<%= sp_module %>1);
<% end -%>
<% if tables.count > 0 -%>
        sp_ftbl_destroy(&ftbl);
<% end -%>
    }

    void reset() override {
        SoundpipeDSPBase::reset();
        if (!isInitialized) return;
<% if inputCount == 2 -%>
        sp_<%= sp_module %>_init(sp, <%= sp_module %>);
<% else -%>
        sp_<%= sp_module %>_init(sp, <%= sp_module %>0);
        sp_<%= sp_module %>_init(sp, <%= sp_module %>1);
<% end -%>
    }

    void process2(FrameRange range) {
        for (int i : range) {

<% (parameters + constant_parameters).each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
<% if inputCount == 2 -%>
            <%= sp_module %>-><%= sp_var %> = <%= data["ak-variable"] %>Ramp.getAndStep();
<% else -%>
            float <%= data["ak-variable"] %> = <%= data["ak-variable"] %>Ramp.getAndStep();
            <%= sp_module %>0-><%= sp_var %> = <%= data["ak-variable"] %>;
            <%= sp_module %>1-><%= sp_var %> = <%= data["ak-variable"] %>;
<% end -%>
<% end -%>

<% end -%>
            float leftIn = inputSample(0, i);
            float rightIn = inputSample(1, i);

            float &leftOut = outputSample(0, i);
            float &rightOut = outputSample(1, i);
<% if inputCount == 2 -%>            
            sp_<%= sp_module %>_compute(sp, <%= sp_module %>, &leftIn, &rightIn, leftOut, rightOut);
<% else %>
            sp_<%= sp_module %>_compute(sp, <%= sp_module %>0, &leftIn, &leftOut);
            sp_<%= sp_module %>_compute(sp, <%= sp_module %>1, &rightIn, &rightOut);
<% end -%>
        }
    }
};

AK_REGISTER_DSP(<%= node %>DSP, "<%= four_letter_code %>")
<% parameters.each do |sp_parameter| -%>
<% sp_parameter.each do  |sp_var, data| -%>
AK_REGISTER_PARAMETER(<%= node %>Parameter<%= data["ak-variable"].camelcase %>)
<% end -%>
<% end -%>
